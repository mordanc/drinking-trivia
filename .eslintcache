[{"/Users/mordan/Documents/Coding/drunk-trivia/src/index.tsx":"1","/Users/mordan/Documents/Coding/drunk-trivia/src/serviceWorker.ts":"2","/Users/mordan/Documents/Coding/drunk-trivia/src/app/store.ts":"3","/Users/mordan/Documents/Coding/drunk-trivia/src/App.tsx":"4","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/triviaSlice.ts":"5","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/TriviaPanel.tsx":"6","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Settings/SettingsDrawer.tsx":"7","/Users/mordan/Documents/Coding/drunk-trivia/src/httpService.ts":"8","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/Tags.tsx":"9","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/useLobby.ts":"10","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/RoomForm.tsx":"11","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/UserModal/UserModal.tsx":"12","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Bets/Bets.tsx":"13","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Navbar/Navbar.tsx":"14"},{"size":648,"mtime":1610900545891,"results":"15","hashOfConfig":"16"},{"size":5424,"mtime":1610900545892,"results":"17","hashOfConfig":"16"},{"size":409,"mtime":1610902869200,"results":"18","hashOfConfig":"16"},{"size":619,"mtime":1611158729650,"results":"19","hashOfConfig":"16"},{"size":5534,"mtime":1611109701156,"results":"20","hashOfConfig":"16"},{"size":4158,"mtime":1611160211097,"results":"21","hashOfConfig":"16"},{"size":5201,"mtime":1611101938102,"results":"22","hashOfConfig":"16"},{"size":567,"mtime":1610905936497,"results":"23","hashOfConfig":"16"},{"size":931,"mtime":1610912385579,"results":"24","hashOfConfig":"16"},{"size":3354,"mtime":1611109889196,"results":"25","hashOfConfig":"16"},{"size":769,"mtime":1611094738146,"results":"26","hashOfConfig":"16"},{"size":2136,"mtime":1611101863607,"results":"27","hashOfConfig":"16"},{"size":1716,"mtime":1611107714878,"results":"28","hashOfConfig":"16"},{"size":1215,"mtime":1611158730730,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1bf3ilm",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mordan/Documents/Coding/drunk-trivia/src/index.tsx",[],["64","65"],"/Users/mordan/Documents/Coding/drunk-trivia/src/serviceWorker.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/app/store.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/App.tsx",["66"],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/triviaSlice.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/TriviaPanel.tsx",["67","68","69","70","71","72","73"],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Settings/SettingsDrawer.tsx",["74","75","76","77","78","79","80","81"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Button,\n  Input,\n  Stack,\n  Flex,\n  Switch,\n  Center,\n  useBreakpointValue,\n  Accordion,\n  AccordionButton,\n  Text,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  InputGroup,\n  InputLeftElement,\n} from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchCategories,\n  selectAllCategories,\n  selectConnectedUsers,\n  selectIsHost,\n  selectRoomName,\n  setAllCategories,\n} from \"../triviaSlice\";\nimport { PhoneIcon, Search2Icon } from \"@chakra-ui/icons\";\n\nexport default function SettingsDrawer({ isOpen, onClose, btnRef }) {\n  const allCategories = useSelector(selectAllCategories);\n  const connectedUsers = useSelector(selectConnectedUsers);\n  const isHost = useSelector(selectIsHost);\n  const roomName = useSelector(selectRoomName);\n\n  const size = useBreakpointValue({\n    sm: \"full\",\n    md: \"full\",\n    lg: \"lg\",\n    xl: \"lg\",\n  });\n\n  const [filteredCategories, setFilteredCategories] = useState(allCategories);\n  const [filter, setFilter] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, []);\n\n  useEffect(() => {\n    if (!filter) {\n      setFilteredCategories(allCategories);\n      return;\n    }\n    const filtered = allCategories.filter((category) =>\n      category?.name?.toLowerCase()?.includes(filter?.toLowerCase())\n    );\n\n    setFilteredCategories(filtered);\n  }, [filter, allCategories]);\n\n  const toggleCategory = (categoryToSelect) => {\n    const temp = allCategories.map((category) => {\n      if (category.name === categoryToSelect.name) {\n        return { ...category, selected: !category.selected };\n      }\n      return category;\n    });\n\n    dispatch(setAllCategories(temp));\n    setFilteredCategories(temp);\n  };\n\n  const toggleAllCategories = () => {\n    const temp = allCategories.map((category) => ({\n      ...category,\n      selected: !category.selected,\n    }));\n\n    dispatch(setAllCategories(temp));\n    setFilteredCategories(temp);\n  };\n\n  return (\n    <Drawer\n      isOpen={isOpen}\n      placement=\"left\"\n      onClose={onClose}\n      size={size || \"full\"}\n      // @ts-ignore\n      finalFocusRef={btnRef}\n    >\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Settings</DrawerHeader>\n\n          <DrawerBody>\n            <Flex alignItems=\"center\">\n              <Text fontWeight=\"bold\" fontSize=\"xl\">\n                Room:&nbsp;\n              </Text>\n              <Text>\n                {roomName ? roomName : \"You have not connected to a room yet\"}\n              </Text>\n            </Flex>\n\n            <Flex alignItems=\"center\" mb=\"1rem\">\n              <Text fontWeight=\"bold\" fontSize=\"xl\">\n                Host:&nbsp;\n              </Text>\n              <Text>{`You are${isHost ? \"\" : \" not\"} the host`}</Text>\n            </Flex>\n\n            <Tabs variant=\"soft-rounded\" colorScheme=\"blue\">\n              <TabList>\n                <Tab color=\"white\">User List</Tab>\n                <Tab color=\"white\">Categories</Tab>\n              </TabList>\n              <TabPanels>\n                <TabPanel>\n                  {connectedUsers.length\n                    ? connectedUsers.map((user) => (\n                        <Text key={user.id}>{user.name}</Text>\n                      ))\n                    : \"Looks empty\"}\n                </TabPanel>\n                <TabPanel>\n                  <InputGroup>\n                    <InputLeftElement\n                      pointerEvents=\"none\"\n                      children={<Search2Icon color=\"gray.300\" />}\n                    />\n                    <Input\n                      placeholder=\"Type to filter...\"\n                      value={filter}\n                      onChange={(e) => setFilter(e.target.value)}\n                    />\n                  </InputGroup>\n\n                  <Center pt=\"1rem\">\n                    <Button onClick={() => toggleAllCategories()}>\n                      Toggle All\n                    </Button>\n                  </Center>\n\n                  <Stack mt=\"1rem\" textAlign=\"left\">\n                    {filteredCategories.map((category: any, index) => (\n                      <Flex\n                        onClick={() => toggleCategory(category)}\n                        justifyContent=\"space-between\"\n                        key={index}\n                      >\n                        {category.name}\n                        <Switch\n                          onChange={() => toggleCategory(category)}\n                          isChecked={category.selected}\n                        />\n                      </Flex>\n                    ))}\n                  </Stack>\n                </TabPanel>\n              </TabPanels>\n            </Tabs>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n}\n","/Users/mordan/Documents/Coding/drunk-trivia/src/httpService.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/Tags.tsx",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/useLobby.ts",["82","83","84","85","86","87"],"import { useToast } from \"@chakra-ui/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { connected } from \"process\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { io } from \"socket.io-client\";\nimport {\n  addUserToList,\n  removeUserFromList,\n  selectQuestion,\n  setIsHost,\n  setRoomName,\n  setSelectedAnswer,\n  updateQuestion,\n} from \"../triviaSlice\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\"; // Name of the event\nconst SOCKET_SERVER_URL = \"https://drinking-trivia-backend.herokuapp.com/\";\n// const SOCKET_SERVER_URL = process.env.BACKEND_URL || \"http://192.168.0.10:5000\";\n\nconst useLobby = () => {\n  const [hosting, setHosting] = useState(false);\n  const [toggle, setToggle] = useState(false);\n  const socketRef = useRef<any>();\n\n  const currentQuestion = useSelector(selectQuestion);\n\n  const dispatch = useDispatch();\n\n  const toast = useToast();\n\n  const sendQuestion = (question) => {\n    socketRef?.current?.emit(\"sendingQuestion\", question);\n  };\n\n  const connect = (userName = `mordan${Math.floor(Math.random() * 100)}`) => {\n    socketRef.current = io(SOCKET_SERVER_URL);\n    socketRef.current.emit(\"addUser\", userName);\n\n    socketRef.current.on(\"switchRoomSuccess\", (roomName, msg) => {\n      toast({ status: \"success\", description: msg });\n      dispatch(setRoomName(roomName));\n      console.log(\"switch success,\", msg);\n    });\n\n    socketRef.current.on(\"hostMessage\", (isHosting) => {\n      setHosting(isHosting);\n      dispatch(setIsHost(isHosting));\n    });\n\n    socketRef.current.on(\"userJoined\", ({ id, name }) => {\n      console.log(\"user joined\");\n\n      if (name !== userName) {\n        toast({\n          status: \"success\",\n          description: `${name} has joined the room`,\n        });\n        setToggle(!toggle);\n        dispatch(addUserToList({ id, name }));\n        console.log(\"adding user:\", { id, name });\n      }\n    });\n\n    socketRef.current.on(\"userLeft\", ({ id, name }) => {\n      console.log(\"user left\");\n\n      if (name !== userName) {\n        toast({\n          status: \"error\",\n          description: `${name} has left the room`,\n        });\n        dispatch(removeUserFromList({ id, name }));\n      }\n    });\n\n    socketRef.current.on(\"receiveQuestion\", (question) => {\n      console.log(\"receiving question from host\", question);\n\n      dispatch(updateQuestion(question));\n    });\n\n    socketRef.current.on(\"selectChoice\", (answer) => {\n      console.log(\"someone selected a choice\", answer);\n\n      dispatch(setSelectedAnswer(answer));\n    });\n  };\n\n  const switchRoom = (roomName) => {\n    socketRef.current.emit(\"switchRoom\", roomName);\n  };\n\n  const updateCurrentQuestion = () => {\n    socketRef.current.emit(\"updateCurrentQuestion\", currentQuestion);\n  };\n\n  const selectAnswer = (answer) => {\n    socketRef?.current?.emit(\"selectChoice\", answer);\n    dispatch(setSelectedAnswer(answer));\n  };\n\n  const updateSelectedCategories = (selectedCategories) => {\n    socketRef.current.emit(\"updateSelectedCategories\", selectedCategories);\n  };\n\n  const selectNewHotseat = (socketId) => {\n    socketRef.current.emit(\"selectNewHotseat\", socketId);\n  };\n\n  return {\n    connect,\n    switchRoom,\n    updateCurrentQuestion,\n    selectAnswer,\n    hosting,\n    sendQuestion,\n    toggle,\n  };\n};\n\nexport default useLobby;\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/RoomForm.tsx",["88","89"],"import {\n  Flex,\n  Input,\n  Button,\n  HStack,\n  useToast,\n  FormControl,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nexport default function RoomForm({ joinRoom }) {\n  const [roomName, setRoomName] = useState(\"\");\n\n  const toast = useToast();\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n      }}\n    >\n      <FormControl>\n        <HStack mt=\"1rem\">\n          <Input\n            value={roomName}\n            onChange={(e) => setRoomName(e.target.value.toLowerCase())}\n          />\n          <Button\n            type=\"submit\"\n            onClick={() => {\n              joinRoom(roomName);\n            }}\n          >\n            Join Room\n          </Button>\n        </HStack>\n      </FormControl>\n    </form>\n  );\n}\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/UserModal/UserModal.tsx",["90","91","92","93","94"],"import {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  CloseButton,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  useDisclosure,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nexport default function UserModal({ isOpen, onClose }) {\n  const [name, setName] = useState(\"\");\n  const [errorText, setErrorText] = useState(\"\");\n\n  const verifyInput = () => {\n    if (!name) {\n      setErrorText(\"Please enter a value for user name\");\n      return;\n    }\n    if (name.length > 20) {\n      setErrorText(\"No more than 20 characters in user name\");\n      return;\n    }\n    onClose(name);\n  };\n  return (\n    <>\n      <Modal isOpen={isOpen} onClose={onClose} closeOnOverlayClick={false}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Enter a user name</ModalHeader>\n          <ModalBody>\n            <form onSubmit={(e) => e.preventDefault()}>\n              <VStack>\n                <Input value={name} onChange={(e) => setName(e.target.value)} />\n\n                {errorText ? (\n                  <Alert status=\"error\">\n                    <AlertIcon />\n                    <AlertDescription>{errorText}</AlertDescription>\n\n                    <CloseButton\n                      onClick={() => setErrorText(\"\")}\n                      position=\"absolute\"\n                      right=\"8px\"\n                      top=\"8px\"\n                    />\n                  </Alert>\n                ) : (\n                  \"\"\n                )}\n                <Button\n                  type=\"submit\"\n                  alignSelf=\"flex-end\"\n                  colorScheme=\"blue\"\n                  mr={3}\n                  onClick={verifyInput}\n                >\n                  Submit\n                </Button>\n              </VStack>\n            </form>\n          </ModalBody>\n\n          {/* <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={verifyInput}>\n              Submit\n            </Button>\n          </ModalFooter> */}\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Bets/Bets.tsx",["95","96","97","98","99","100","101","102"],"import React, { useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  Center,\n  Flex,\n  HStack,\n  IconButton,\n  Slider,\n  SliderFilledTrack,\n  SliderThumb,\n  SliderTrack,\n  Text,\n  Tooltip,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { AddIcon, InfoIcon, MinusIcon } from \"@chakra-ui/icons\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function Bets() {\n  const [betAmount, setBetAmount] = useState(0);\n\n  const dispatch = useDispatch();\n\n  const updateBetAmount = (operation) => {\n    const newAmount = operation === \"add\" ? betAmount + 1 : betAmount - 1;\n\n    setBetAmount(newAmount);\n    dispatch(updateBetAmount(newAmount));\n  };\n  return (\n    <VStack>\n      {/* <ButtonGroup>\n        <IconButton\n          aria-label=\"Search database\"\n          icon={<MinusIcon />}\n          onClick={() => updateBetAmount(\"subtract\")}\n        />\n        <Button variant=\"ghost\">{betAmount}</Button>\n        <IconButton\n          aria-label=\"Search database\"\n          icon={<AddIcon />}\n          onClick={() => updateBetAmount(\"add\")}\n        />\n      </ButtonGroup> */}\n      <Flex alignItems=\"center\">\n        <Text>Bets: {betAmount}&nbsp;</Text>\n        <Tooltip\n          label=\"Select a number of seconds to bet against the person in the hotseat, or for yourself\"\n          fontSize=\"md\"\n        >\n          <InfoIcon />\n        </Tooltip>\n      </Flex>\n      <Slider\n        // width=\"50%\"\n        max={12}\n        min={0}\n        aria-label=\"slider-ex-1\"\n        defaultValue={0}\n        onChange={(e) => setBetAmount(e)}\n        isReadOnly={false}\n      >\n        <SliderTrack>\n          <SliderFilledTrack />\n        </SliderTrack>\n        <SliderThumb />\n      </Slider>\n    </VStack>\n  );\n}\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Navbar/Navbar.tsx",["103","104","105","106","107","108","109","110","111","112","113","114","115","116","117"],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":2,"column":8,"nodeType":"124","messageId":"125","endLine":2,"endColumn":12},{"ruleId":"122","severity":1,"message":"126","line":10,"column":3,"nodeType":"124","messageId":"125","endLine":10,"endColumn":7},{"ruleId":"122","severity":1,"message":"127","line":11,"column":3,"nodeType":"124","messageId":"125","endLine":11,"endColumn":14},{"ruleId":"122","severity":1,"message":"128","line":14,"column":28,"nodeType":"124","messageId":"125","endLine":14,"endColumn":37},{"ruleId":"129","severity":1,"message":"130","line":81,"column":6,"nodeType":"131","endLine":81,"endColumn":14,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"133","line":87,"column":6,"nodeType":"131","endLine":87,"endColumn":8,"suggestions":"134"},{"ruleId":"129","severity":1,"message":"135","line":93,"column":6,"nodeType":"131","endLine":93,"endColumn":16,"suggestions":"136"},{"ruleId":"129","severity":1,"message":"137","line":113,"column":6,"nodeType":"131","endLine":113,"endColumn":22,"suggestions":"138"},{"ruleId":"122","severity":1,"message":"139","line":17,"column":3,"nodeType":"124","messageId":"125","endLine":17,"endColumn":12},{"ruleId":"122","severity":1,"message":"140","line":18,"column":3,"nodeType":"124","messageId":"125","endLine":18,"endColumn":18},{"ruleId":"122","severity":1,"message":"141","line":20,"column":3,"nodeType":"124","messageId":"125","endLine":20,"endColumn":16},{"ruleId":"122","severity":1,"message":"142","line":21,"column":3,"nodeType":"124","messageId":"125","endLine":21,"endColumn":16},{"ruleId":"122","severity":1,"message":"143","line":22,"column":3,"nodeType":"124","messageId":"125","endLine":22,"endColumn":17},{"ruleId":"122","severity":1,"message":"144","line":23,"column":3,"nodeType":"124","messageId":"125","endLine":23,"endColumn":6},{"ruleId":"122","severity":1,"message":"128","line":41,"column":10,"nodeType":"124","messageId":"125","endLine":41,"endColumn":19},{"ruleId":"129","severity":1,"message":"145","line":63,"column":6,"nodeType":"131","endLine":63,"endColumn":8,"suggestions":"146"},{"ruleId":"122","severity":1,"message":"147","line":2,"column":8,"nodeType":"124","messageId":"125","endLine":2,"endColumn":17},{"ruleId":"122","severity":1,"message":"148","line":3,"column":10,"nodeType":"124","messageId":"125","endLine":3,"endColumn":19},{"ruleId":"122","severity":1,"message":"149","line":4,"column":10,"nodeType":"124","messageId":"125","endLine":4,"endColumn":19},{"ruleId":"122","severity":1,"message":"150","line":17,"column":7,"nodeType":"124","messageId":"125","endLine":17,"endColumn":29},{"ruleId":"122","severity":1,"message":"151","line":103,"column":9,"nodeType":"124","messageId":"125","endLine":103,"endColumn":33},{"ruleId":"122","severity":1,"message":"152","line":107,"column":9,"nodeType":"124","messageId":"125","endLine":107,"endColumn":25},{"ruleId":"122","severity":1,"message":"153","line":2,"column":3,"nodeType":"124","messageId":"125","endLine":2,"endColumn":7},{"ruleId":"122","severity":1,"message":"154","line":14,"column":9,"nodeType":"124","messageId":"125","endLine":14,"endColumn":14},{"ruleId":"122","severity":1,"message":"155","line":5,"column":3,"nodeType":"124","messageId":"125","endLine":5,"endColumn":13},{"ruleId":"122","severity":1,"message":"156","line":11,"column":3,"nodeType":"124","messageId":"125","endLine":11,"endColumn":19},{"ruleId":"122","severity":1,"message":"157","line":13,"column":3,"nodeType":"124","messageId":"125","endLine":13,"endColumn":14},{"ruleId":"122","severity":1,"message":"126","line":16,"column":3,"nodeType":"124","messageId":"125","endLine":16,"endColumn":7},{"ruleId":"122","severity":1,"message":"158","line":17,"column":3,"nodeType":"124","messageId":"125","endLine":17,"endColumn":16},{"ruleId":"122","severity":1,"message":"159","line":3,"column":3,"nodeType":"124","messageId":"125","endLine":3,"endColumn":9},{"ruleId":"122","severity":1,"message":"127","line":4,"column":3,"nodeType":"124","messageId":"125","endLine":4,"endColumn":14},{"ruleId":"122","severity":1,"message":"160","line":5,"column":3,"nodeType":"124","messageId":"125","endLine":5,"endColumn":9},{"ruleId":"122","severity":1,"message":"161","line":7,"column":3,"nodeType":"124","messageId":"125","endLine":7,"endColumn":9},{"ruleId":"122","severity":1,"message":"162","line":8,"column":3,"nodeType":"124","messageId":"125","endLine":8,"endColumn":13},{"ruleId":"122","severity":1,"message":"163","line":17,"column":10,"nodeType":"124","messageId":"125","endLine":17,"endColumn":17},{"ruleId":"122","severity":1,"message":"164","line":17,"column":29,"nodeType":"124","messageId":"125","endLine":17,"endColumn":38},{"ruleId":"122","severity":1,"message":"165","line":29,"column":14,"nodeType":"124","messageId":"125","endLine":29,"endColumn":29},{"ruleId":"122","severity":1,"message":"166","line":3,"column":3,"nodeType":"124","messageId":"125","endLine":3,"endColumn":9},{"ruleId":"122","severity":1,"message":"167","line":4,"column":3,"nodeType":"124","messageId":"125","endLine":4,"endColumn":13},{"ruleId":"122","severity":1,"message":"168","line":5,"column":3,"nodeType":"124","messageId":"125","endLine":5,"endColumn":15},{"ruleId":"122","severity":1,"message":"169","line":6,"column":3,"nodeType":"124","messageId":"125","endLine":6,"endColumn":15},{"ruleId":"122","severity":1,"message":"170","line":7,"column":3,"nodeType":"124","messageId":"125","endLine":7,"endColumn":16},{"ruleId":"122","severity":1,"message":"171","line":8,"column":3,"nodeType":"124","messageId":"125","endLine":8,"endColumn":16},{"ruleId":"122","severity":1,"message":"172","line":9,"column":3,"nodeType":"124","messageId":"125","endLine":9,"endColumn":20},{"ruleId":"122","severity":1,"message":"159","line":10,"column":3,"nodeType":"124","messageId":"125","endLine":10,"endColumn":9},{"ruleId":"122","severity":1,"message":"173","line":11,"column":3,"nodeType":"124","messageId":"125","endLine":11,"endColumn":8},{"ruleId":"122","severity":1,"message":"126","line":13,"column":3,"nodeType":"124","messageId":"125","endLine":13,"endColumn":7},{"ruleId":"122","severity":1,"message":"174","line":15,"column":3,"nodeType":"124","messageId":"125","endLine":15,"endColumn":12},{"ruleId":"122","severity":1,"message":"175","line":20,"column":8,"nodeType":"124","messageId":"125","endLine":20,"endColumn":17},{"ruleId":"122","severity":1,"message":"176","line":29,"column":9,"nodeType":"124","messageId":"125","endLine":29,"endColumn":15},{"ruleId":"122","severity":1,"message":"177","line":30,"column":9,"nodeType":"124","messageId":"125","endLine":30,"endColumn":17},{"ruleId":"122","severity":1,"message":"178","line":34,"column":9,"nodeType":"124","messageId":"125","endLine":34,"endColumn":13},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Text' is defined but never used.","'ButtonGroup' is defined but never used.","'PhoneIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'question' and 'sendQuestion'. Either include them or remove the dependency array.","ArrayExpression",["181"],"React Hook useEffect has missing dependencies: 'onOpen' and 'userName'. Either include them or remove the dependency array.",["182"],"React Hook useEffect has missing dependencies: 'connect' and 'getNewQuestion'. Either include them or remove the dependency array.",["183"],"React Hook useEffect has missing dependencies: 'betAmount', 'isCorrectAnswer', and 'toast'. Either include them or remove the dependency array.",["184"],"'Accordion' is defined but never used.","'AccordionButton' is defined but never used.","'AccordionIcon' is defined but never used.","'AccordionItem' is defined but never used.","'AccordionPanel' is defined but never used.","'Box' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["185"],"'userEvent' is defined but never used.","'connected' is defined but never used.","'useEffect' is defined but never used.","'NEW_CHAT_MESSAGE_EVENT' is assigned a value but never used.","'updateSelectedCategories' is assigned a value but never used.","'selectNewHotseat' is assigned a value but never used.","'Flex' is defined but never used.","'toast' is assigned a value but never used.","'AlertTitle' is defined but never used.","'ModalCloseButton' is defined but never used.","'ModalFooter' is defined but never used.","'useDisclosure' is defined but never used.","'Button' is defined but never used.","'Center' is defined but never used.","'HStack' is defined but never used.","'IconButton' is defined but never used.","'AddIcon' is defined but never used.","'MinusIcon' is defined but never used.","'updateBetAmount' is assigned a value but never used.","'Drawer' is defined but never used.","'DrawerBody' is defined but never used.","'DrawerFooter' is defined but never used.","'DrawerHeader' is defined but never used.","'DrawerOverlay' is defined but never used.","'DrawerContent' is defined but never used.","'DrawerCloseButton' is defined but never used.","'Input' is defined but never used.","'Container' is defined but never used.","'hamburger' is defined but never used.","'isHost' is assigned a value but never used.","'roomName' is assigned a value but never used.","'size' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},"Update the dependencies array to be: [question, sendQuestion, toggle]",{"range":"196","text":"197"},"Update the dependencies array to be: [onOpen, userName]",{"range":"198","text":"199"},"Update the dependencies array to be: [connect, getNewQuestion, userName]",{"range":"200","text":"201"},"Update the dependencies array to be: [betAmount, isCorrectAnswer, selectedAnswer, toast]",{"range":"202","text":"203"},"Update the dependencies array to be: [dispatch]",{"range":"204","text":"205"},[1953,1961],"[question, sendQuestion, toggle]",[2033,2035],"[onOpen, userName]",[2136,2146],"[connect, getNewQuestion, userName]",[2591,2607],"[betAmount, isCorrectAnswer, selectedAnswer, toast]",[1332,1334],"[dispatch]"]
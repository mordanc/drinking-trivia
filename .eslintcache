[{"/Users/mordan/Documents/Coding/drunk-trivia/src/index.tsx":"1","/Users/mordan/Documents/Coding/drunk-trivia/src/serviceWorker.ts":"2","/Users/mordan/Documents/Coding/drunk-trivia/src/app/store.ts":"3","/Users/mordan/Documents/Coding/drunk-trivia/src/App.tsx":"4","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/triviaSlice.ts":"5","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/TriviaPanel.tsx":"6","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Navbar.tsx":"7","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Settings/SettingsDrawer.tsx":"8","/Users/mordan/Documents/Coding/drunk-trivia/src/httpService.ts":"9","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/Tags.tsx":"10","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/useLobby.ts":"11","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/RoomForm.tsx":"12","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/UserModal/UserModal.tsx":"13","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Bets/Bets.tsx":"14"},{"size":648,"mtime":1610900545891,"results":"15","hashOfConfig":"16"},{"size":5424,"mtime":1610900545892,"results":"17","hashOfConfig":"16"},{"size":409,"mtime":1610902869200,"results":"18","hashOfConfig":"16"},{"size":612,"mtime":1610920566651,"results":"19","hashOfConfig":"16"},{"size":5534,"mtime":1611109701156,"results":"20","hashOfConfig":"16"},{"size":4145,"mtime":1611109711342,"results":"21","hashOfConfig":"16"},{"size":1213,"mtime":1611101950679,"results":"22","hashOfConfig":"16"},{"size":5201,"mtime":1611101938102,"results":"23","hashOfConfig":"16"},{"size":567,"mtime":1610905936497,"results":"24","hashOfConfig":"16"},{"size":931,"mtime":1610912385579,"results":"25","hashOfConfig":"16"},{"size":3354,"mtime":1611109889196,"results":"26","hashOfConfig":"16"},{"size":769,"mtime":1611094738146,"results":"27","hashOfConfig":"16"},{"size":2136,"mtime":1611101863607,"results":"28","hashOfConfig":"16"},{"size":1716,"mtime":1611107714878,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1bf3ilm",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mordan/Documents/Coding/drunk-trivia/src/index.tsx",[],["64","65"],"/Users/mordan/Documents/Coding/drunk-trivia/src/serviceWorker.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/app/store.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/App.tsx",["66"],"import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport TriviaPanel from \"./features/trivia/TriviaPanel/TriviaPanel\";\r\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\r\nimport Navbar from \"./features/trivia/Navbar\";\r\n\r\nconst config = {\r\n  useSystemColorMode: false,\r\n  initialColorMode: \"dark\",\r\n};\r\n\r\nconst customTheme = extendTheme({ config });\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ChakraProvider theme={customTheme}>\r\n        <Navbar />\r\n        <TriviaPanel />\r\n      </ChakraProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/triviaSlice.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/TriviaPanel.tsx",["67","68","69","70","71","72","73"],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Navbar.tsx",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88"],"import React from \"react\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Button,\n  Input,\n  useDisclosure,\n  Text,\n  Flex,\n  Container,\n  IconButton,\n  useBreakpointValue,\n} from \"@chakra-ui/react\";\n\nimport hamburger from \"../../app/images/menu-white-48dp.svg\";\n\nimport SettingsDrawer from \"./Settings/SettingsDrawer\";\nimport { useSelector } from \"react-redux\";\nimport { selectIsHost, selectRoomName } from \"./triviaSlice\";\nimport { HamburgerIcon } from \"@chakra-ui/icons\";\n\nexport default function Navbar() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const isHost = useSelector(selectIsHost);\n  const roomName = useSelector(selectRoomName);\n\n  const btnRef = React.useRef();\n\n  const size = useBreakpointValue({\n    sm: \"sm\",\n    md: \"md\",\n    lg: \"lg\",\n    xl: \"xl\",\n  });\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      className=\"navbar\"\n      p=\"1rem\"\n    >\n      <SettingsDrawer isOpen={isOpen} onClose={onClose} btnRef={btnRef} />\n      <IconButton\n        onClick={onOpen}\n        aria-label=\"Search database\"\n        icon={<HamburgerIcon />}\n      />\n    </Flex>\n  );\n}\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Settings/SettingsDrawer.tsx",["89","90","91","92","93","94","95","96"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Button,\n  Input,\n  Stack,\n  Flex,\n  Switch,\n  Center,\n  useBreakpointValue,\n  Accordion,\n  AccordionButton,\n  Text,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  InputGroup,\n  InputLeftElement,\n} from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchCategories,\n  selectAllCategories,\n  selectConnectedUsers,\n  selectIsHost,\n  selectRoomName,\n  setAllCategories,\n} from \"../triviaSlice\";\nimport { PhoneIcon, Search2Icon } from \"@chakra-ui/icons\";\n\nexport default function SettingsDrawer({ isOpen, onClose, btnRef }) {\n  const allCategories = useSelector(selectAllCategories);\n  const connectedUsers = useSelector(selectConnectedUsers);\n  const isHost = useSelector(selectIsHost);\n  const roomName = useSelector(selectRoomName);\n\n  const size = useBreakpointValue({\n    sm: \"full\",\n    md: \"full\",\n    lg: \"lg\",\n    xl: \"lg\",\n  });\n\n  const [filteredCategories, setFilteredCategories] = useState(allCategories);\n  const [filter, setFilter] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, []);\n\n  useEffect(() => {\n    if (!filter) {\n      setFilteredCategories(allCategories);\n      return;\n    }\n    const filtered = allCategories.filter((category) =>\n      category?.name?.toLowerCase()?.includes(filter?.toLowerCase())\n    );\n\n    setFilteredCategories(filtered);\n  }, [filter, allCategories]);\n\n  const toggleCategory = (categoryToSelect) => {\n    const temp = allCategories.map((category) => {\n      if (category.name === categoryToSelect.name) {\n        return { ...category, selected: !category.selected };\n      }\n      return category;\n    });\n\n    dispatch(setAllCategories(temp));\n    setFilteredCategories(temp);\n  };\n\n  const toggleAllCategories = () => {\n    const temp = allCategories.map((category) => ({\n      ...category,\n      selected: !category.selected,\n    }));\n\n    dispatch(setAllCategories(temp));\n    setFilteredCategories(temp);\n  };\n\n  return (\n    <Drawer\n      isOpen={isOpen}\n      placement=\"left\"\n      onClose={onClose}\n      size={size || \"full\"}\n      // @ts-ignore\n      finalFocusRef={btnRef}\n    >\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Settings</DrawerHeader>\n\n          <DrawerBody>\n            <Flex alignItems=\"center\">\n              <Text fontWeight=\"bold\" fontSize=\"xl\">\n                Room:&nbsp;\n              </Text>\n              <Text>\n                {roomName ? roomName : \"You have not connected to a room yet\"}\n              </Text>\n            </Flex>\n\n            <Flex alignItems=\"center\" mb=\"1rem\">\n              <Text fontWeight=\"bold\" fontSize=\"xl\">\n                Host:&nbsp;\n              </Text>\n              <Text>{`You are${isHost ? \"\" : \" not\"} the host`}</Text>\n            </Flex>\n\n            <Tabs variant=\"soft-rounded\" colorScheme=\"blue\">\n              <TabList>\n                <Tab color=\"white\">User List</Tab>\n                <Tab color=\"white\">Categories</Tab>\n              </TabList>\n              <TabPanels>\n                <TabPanel>\n                  {connectedUsers.length\n                    ? connectedUsers.map((user) => (\n                        <Text key={user.id}>{user.name}</Text>\n                      ))\n                    : \"Looks empty\"}\n                </TabPanel>\n                <TabPanel>\n                  <InputGroup>\n                    <InputLeftElement\n                      pointerEvents=\"none\"\n                      children={<Search2Icon color=\"gray.300\" />}\n                    />\n                    <Input\n                      placeholder=\"Type to filter...\"\n                      value={filter}\n                      onChange={(e) => setFilter(e.target.value)}\n                    />\n                  </InputGroup>\n\n                  <Center pt=\"1rem\">\n                    <Button onClick={() => toggleAllCategories()}>\n                      Toggle All\n                    </Button>\n                  </Center>\n\n                  <Stack mt=\"1rem\" textAlign=\"left\">\n                    {filteredCategories.map((category: any, index) => (\n                      <Flex\n                        onClick={() => toggleCategory(category)}\n                        justifyContent=\"space-between\"\n                        key={index}\n                      >\n                        {category.name}\n                        <Switch\n                          onChange={() => toggleCategory(category)}\n                          isChecked={category.selected}\n                        />\n                      </Flex>\n                    ))}\n                  </Stack>\n                </TabPanel>\n              </TabPanels>\n            </Tabs>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n}\n","/Users/mordan/Documents/Coding/drunk-trivia/src/httpService.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/Tags.tsx",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/useLobby.ts",["97","98","99","100","101","102"],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/RoomForm.tsx",["103","104"],"import {\n  Flex,\n  Input,\n  Button,\n  HStack,\n  useToast,\n  FormControl,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nexport default function RoomForm({ joinRoom }) {\n  const [roomName, setRoomName] = useState(\"\");\n\n  const toast = useToast();\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n      }}\n    >\n      <FormControl>\n        <HStack mt=\"1rem\">\n          <Input\n            value={roomName}\n            onChange={(e) => setRoomName(e.target.value.toLowerCase())}\n          />\n          <Button\n            type=\"submit\"\n            onClick={() => {\n              joinRoom(roomName);\n            }}\n          >\n            Join Room\n          </Button>\n        </HStack>\n      </FormControl>\n    </form>\n  );\n}\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/UserModal/UserModal.tsx",["105","106","107","108","109"],"import {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  CloseButton,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  useDisclosure,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nexport default function UserModal({ isOpen, onClose }) {\n  const [name, setName] = useState(\"\");\n  const [errorText, setErrorText] = useState(\"\");\n\n  const verifyInput = () => {\n    if (!name) {\n      setErrorText(\"Please enter a value for user name\");\n      return;\n    }\n    if (name.length > 20) {\n      setErrorText(\"No more than 20 characters in user name\");\n      return;\n    }\n    onClose(name);\n  };\n  return (\n    <>\n      <Modal isOpen={isOpen} onClose={onClose} closeOnOverlayClick={false}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Enter a user name</ModalHeader>\n          <ModalBody>\n            <form onSubmit={(e) => e.preventDefault()}>\n              <VStack>\n                <Input value={name} onChange={(e) => setName(e.target.value)} />\n\n                {errorText ? (\n                  <Alert status=\"error\">\n                    <AlertIcon />\n                    <AlertDescription>{errorText}</AlertDescription>\n\n                    <CloseButton\n                      onClick={() => setErrorText(\"\")}\n                      position=\"absolute\"\n                      right=\"8px\"\n                      top=\"8px\"\n                    />\n                  </Alert>\n                ) : (\n                  \"\"\n                )}\n                <Button\n                  type=\"submit\"\n                  alignSelf=\"flex-end\"\n                  colorScheme=\"blue\"\n                  mr={3}\n                  onClick={verifyInput}\n                >\n                  Submit\n                </Button>\n              </VStack>\n            </form>\n          </ModalBody>\n\n          {/* <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={verifyInput}>\n              Submit\n            </Button>\n          </ModalFooter> */}\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Bets/Bets.tsx",["110","111","112","113","114","115","116","117"],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":2,"column":8,"nodeType":"124","messageId":"125","endLine":2,"endColumn":12},{"ruleId":"122","severity":1,"message":"126","line":10,"column":3,"nodeType":"124","messageId":"125","endLine":10,"endColumn":7},{"ruleId":"122","severity":1,"message":"127","line":11,"column":3,"nodeType":"124","messageId":"125","endLine":11,"endColumn":14},{"ruleId":"122","severity":1,"message":"128","line":14,"column":28,"nodeType":"124","messageId":"125","endLine":14,"endColumn":37},{"ruleId":"129","severity":1,"message":"130","line":81,"column":6,"nodeType":"131","endLine":81,"endColumn":14,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"133","line":87,"column":6,"nodeType":"131","endLine":87,"endColumn":8,"suggestions":"134"},{"ruleId":"129","severity":1,"message":"135","line":93,"column":6,"nodeType":"131","endLine":93,"endColumn":16,"suggestions":"136"},{"ruleId":"129","severity":1,"message":"137","line":113,"column":6,"nodeType":"131","endLine":113,"endColumn":22,"suggestions":"138"},{"ruleId":"122","severity":1,"message":"139","line":3,"column":3,"nodeType":"124","messageId":"125","endLine":3,"endColumn":9},{"ruleId":"122","severity":1,"message":"140","line":4,"column":3,"nodeType":"124","messageId":"125","endLine":4,"endColumn":13},{"ruleId":"122","severity":1,"message":"141","line":5,"column":3,"nodeType":"124","messageId":"125","endLine":5,"endColumn":15},{"ruleId":"122","severity":1,"message":"142","line":6,"column":3,"nodeType":"124","messageId":"125","endLine":6,"endColumn":15},{"ruleId":"122","severity":1,"message":"143","line":7,"column":3,"nodeType":"124","messageId":"125","endLine":7,"endColumn":16},{"ruleId":"122","severity":1,"message":"144","line":8,"column":3,"nodeType":"124","messageId":"125","endLine":8,"endColumn":16},{"ruleId":"122","severity":1,"message":"145","line":9,"column":3,"nodeType":"124","messageId":"125","endLine":9,"endColumn":20},{"ruleId":"122","severity":1,"message":"146","line":10,"column":3,"nodeType":"124","messageId":"125","endLine":10,"endColumn":9},{"ruleId":"122","severity":1,"message":"147","line":11,"column":3,"nodeType":"124","messageId":"125","endLine":11,"endColumn":8},{"ruleId":"122","severity":1,"message":"126","line":13,"column":3,"nodeType":"124","messageId":"125","endLine":13,"endColumn":7},{"ruleId":"122","severity":1,"message":"148","line":15,"column":3,"nodeType":"124","messageId":"125","endLine":15,"endColumn":12},{"ruleId":"122","severity":1,"message":"149","line":20,"column":8,"nodeType":"124","messageId":"125","endLine":20,"endColumn":17},{"ruleId":"122","severity":1,"message":"150","line":29,"column":9,"nodeType":"124","messageId":"125","endLine":29,"endColumn":15},{"ruleId":"122","severity":1,"message":"151","line":30,"column":9,"nodeType":"124","messageId":"125","endLine":30,"endColumn":17},{"ruleId":"122","severity":1,"message":"152","line":34,"column":9,"nodeType":"124","messageId":"125","endLine":34,"endColumn":13},{"ruleId":"122","severity":1,"message":"153","line":17,"column":3,"nodeType":"124","messageId":"125","endLine":17,"endColumn":12},{"ruleId":"122","severity":1,"message":"154","line":18,"column":3,"nodeType":"124","messageId":"125","endLine":18,"endColumn":18},{"ruleId":"122","severity":1,"message":"155","line":20,"column":3,"nodeType":"124","messageId":"125","endLine":20,"endColumn":16},{"ruleId":"122","severity":1,"message":"156","line":21,"column":3,"nodeType":"124","messageId":"125","endLine":21,"endColumn":16},{"ruleId":"122","severity":1,"message":"157","line":22,"column":3,"nodeType":"124","messageId":"125","endLine":22,"endColumn":17},{"ruleId":"122","severity":1,"message":"158","line":23,"column":3,"nodeType":"124","messageId":"125","endLine":23,"endColumn":6},{"ruleId":"122","severity":1,"message":"128","line":41,"column":10,"nodeType":"124","messageId":"125","endLine":41,"endColumn":19},{"ruleId":"129","severity":1,"message":"159","line":63,"column":6,"nodeType":"131","endLine":63,"endColumn":8,"suggestions":"160"},{"ruleId":"122","severity":1,"message":"161","line":2,"column":8,"nodeType":"124","messageId":"125","endLine":2,"endColumn":17},{"ruleId":"122","severity":1,"message":"162","line":3,"column":10,"nodeType":"124","messageId":"125","endLine":3,"endColumn":19},{"ruleId":"122","severity":1,"message":"163","line":4,"column":10,"nodeType":"124","messageId":"125","endLine":4,"endColumn":19},{"ruleId":"122","severity":1,"message":"164","line":17,"column":7,"nodeType":"124","messageId":"125","endLine":17,"endColumn":29},{"ruleId":"122","severity":1,"message":"165","line":103,"column":9,"nodeType":"124","messageId":"125","endLine":103,"endColumn":33},{"ruleId":"122","severity":1,"message":"166","line":107,"column":9,"nodeType":"124","messageId":"125","endLine":107,"endColumn":25},{"ruleId":"122","severity":1,"message":"167","line":2,"column":3,"nodeType":"124","messageId":"125","endLine":2,"endColumn":7},{"ruleId":"122","severity":1,"message":"168","line":14,"column":9,"nodeType":"124","messageId":"125","endLine":14,"endColumn":14},{"ruleId":"122","severity":1,"message":"169","line":5,"column":3,"nodeType":"124","messageId":"125","endLine":5,"endColumn":13},{"ruleId":"122","severity":1,"message":"170","line":11,"column":3,"nodeType":"124","messageId":"125","endLine":11,"endColumn":19},{"ruleId":"122","severity":1,"message":"171","line":13,"column":3,"nodeType":"124","messageId":"125","endLine":13,"endColumn":14},{"ruleId":"122","severity":1,"message":"126","line":16,"column":3,"nodeType":"124","messageId":"125","endLine":16,"endColumn":7},{"ruleId":"122","severity":1,"message":"172","line":17,"column":3,"nodeType":"124","messageId":"125","endLine":17,"endColumn":16},{"ruleId":"122","severity":1,"message":"146","line":3,"column":3,"nodeType":"124","messageId":"125","endLine":3,"endColumn":9},{"ruleId":"122","severity":1,"message":"127","line":4,"column":3,"nodeType":"124","messageId":"125","endLine":4,"endColumn":14},{"ruleId":"122","severity":1,"message":"173","line":5,"column":3,"nodeType":"124","messageId":"125","endLine":5,"endColumn":9},{"ruleId":"122","severity":1,"message":"174","line":7,"column":3,"nodeType":"124","messageId":"125","endLine":7,"endColumn":9},{"ruleId":"122","severity":1,"message":"175","line":8,"column":3,"nodeType":"124","messageId":"125","endLine":8,"endColumn":13},{"ruleId":"122","severity":1,"message":"176","line":17,"column":10,"nodeType":"124","messageId":"125","endLine":17,"endColumn":17},{"ruleId":"122","severity":1,"message":"177","line":17,"column":29,"nodeType":"124","messageId":"125","endLine":17,"endColumn":38},{"ruleId":"122","severity":1,"message":"178","line":29,"column":14,"nodeType":"124","messageId":"125","endLine":29,"endColumn":29},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Text' is defined but never used.","'ButtonGroup' is defined but never used.","'PhoneIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'question' and 'sendQuestion'. Either include them or remove the dependency array.","ArrayExpression",["181"],"React Hook useEffect has missing dependencies: 'onOpen' and 'userName'. Either include them or remove the dependency array.",["182"],"React Hook useEffect has missing dependencies: 'connect' and 'getNewQuestion'. Either include them or remove the dependency array.",["183"],"React Hook useEffect has missing dependencies: 'betAmount', 'isCorrectAnswer', and 'toast'. Either include them or remove the dependency array.",["184"],"'Drawer' is defined but never used.","'DrawerBody' is defined but never used.","'DrawerFooter' is defined but never used.","'DrawerHeader' is defined but never used.","'DrawerOverlay' is defined but never used.","'DrawerContent' is defined but never used.","'DrawerCloseButton' is defined but never used.","'Button' is defined but never used.","'Input' is defined but never used.","'Container' is defined but never used.","'hamburger' is defined but never used.","'isHost' is assigned a value but never used.","'roomName' is assigned a value but never used.","'size' is assigned a value but never used.","'Accordion' is defined but never used.","'AccordionButton' is defined but never used.","'AccordionIcon' is defined but never used.","'AccordionItem' is defined but never used.","'AccordionPanel' is defined but never used.","'Box' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["185"],"'userEvent' is defined but never used.","'connected' is defined but never used.","'useEffect' is defined but never used.","'NEW_CHAT_MESSAGE_EVENT' is assigned a value but never used.","'updateSelectedCategories' is assigned a value but never used.","'selectNewHotseat' is assigned a value but never used.","'Flex' is defined but never used.","'toast' is assigned a value but never used.","'AlertTitle' is defined but never used.","'ModalCloseButton' is defined but never used.","'ModalFooter' is defined but never used.","'useDisclosure' is defined but never used.","'Center' is defined but never used.","'HStack' is defined but never used.","'IconButton' is defined but never used.","'AddIcon' is defined but never used.","'MinusIcon' is defined but never used.","'updateBetAmount' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},"Update the dependencies array to be: [question, sendQuestion, toggle]",{"range":"196","text":"197"},"Update the dependencies array to be: [onOpen, userName]",{"range":"198","text":"199"},"Update the dependencies array to be: [connect, getNewQuestion, userName]",{"range":"200","text":"201"},"Update the dependencies array to be: [betAmount, isCorrectAnswer, selectedAnswer, toast]",{"range":"202","text":"203"},"Update the dependencies array to be: [dispatch]",{"range":"204","text":"205"},[1953,1961],"[question, sendQuestion, toggle]",[2033,2035],"[onOpen, userName]",[2136,2146],"[connect, getNewQuestion, userName]",[2578,2594],"[betAmount, isCorrectAnswer, selectedAnswer, toast]",[1332,1334],"[dispatch]"]
[{"/Users/mordan/Documents/Coding/drunk-trivia/src/index.tsx":"1","/Users/mordan/Documents/Coding/drunk-trivia/src/serviceWorker.ts":"2","/Users/mordan/Documents/Coding/drunk-trivia/src/app/store.ts":"3","/Users/mordan/Documents/Coding/drunk-trivia/src/App.tsx":"4","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/triviaSlice.ts":"5","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/TriviaPanel.tsx":"6","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Navbar.tsx":"7","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Settings/SettingsDrawer.tsx":"8","/Users/mordan/Documents/Coding/drunk-trivia/src/httpService.ts":"9","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/Tags.tsx":"10","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/useLobby.ts":"11","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/RoomForm.tsx":"12"},{"size":648,"mtime":1610900545891,"results":"13","hashOfConfig":"14"},{"size":5424,"mtime":1610900545892,"results":"15","hashOfConfig":"14"},{"size":409,"mtime":1610902869200,"results":"16","hashOfConfig":"14"},{"size":612,"mtime":1610920566651,"results":"17","hashOfConfig":"14"},{"size":4048,"mtime":1611090604315,"results":"18","hashOfConfig":"14"},{"size":3516,"mtime":1611092236416,"results":"19","hashOfConfig":"14"},{"size":1091,"mtime":1611091068863,"results":"20","hashOfConfig":"14"},{"size":3048,"mtime":1610920484477,"results":"21","hashOfConfig":"14"},{"size":567,"mtime":1610905936497,"results":"22","hashOfConfig":"14"},{"size":931,"mtime":1610912385579,"results":"23","hashOfConfig":"14"},{"size":5172,"mtime":1611090582151,"results":"24","hashOfConfig":"14"},{"size":769,"mtime":1611094738146,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1bf3ilm",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mordan/Documents/Coding/drunk-trivia/src/index.tsx",[],["55","56"],"/Users/mordan/Documents/Coding/drunk-trivia/src/serviceWorker.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/app/store.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/App.tsx",["57"],"import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport TriviaPanel from \"./features/trivia/TriviaPanel/TriviaPanel\";\r\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\r\nimport Navbar from \"./features/trivia/Navbar\";\r\n\r\nconst config = {\r\n  useSystemColorMode: false,\r\n  initialColorMode: \"dark\",\r\n};\r\n\r\nconst customTheme = extendTheme({ config });\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ChakraProvider theme={customTheme}>\r\n        <Navbar />\r\n        <TriviaPanel />\r\n      </ChakraProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/triviaSlice.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/TriviaPanel.tsx",["58","59","60","61","62","63"],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Navbar.tsx",["64","65","66","67","68","69","70","71","72"],"import React from \"react\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Button,\n  Input,\n  useDisclosure,\n  Text,\n  Flex,\n  Container,\n} from \"@chakra-ui/react\";\n\nimport hamburger from \"../../app/images/menu-white-48dp.svg\";\n\nimport SettingsDrawer from \"./Settings/SettingsDrawer\";\nimport { useSelector } from \"react-redux\";\nimport { selectIsHost } from \"./triviaSlice\";\n\nexport default function Navbar() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const isHost = useSelector(selectIsHost);\n  const btnRef = React.useRef();\n\n  return (\n    <Container>\n      <Flex\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        className=\"navbar\"\n      >\n        <SettingsDrawer isOpen={isOpen} onClose={onClose} btnRef={btnRef} />\n        <img\n          onClick={onOpen}\n          className={\"settings_button\"}\n          src={hamburger}\n          alt=\"Settings\"\n        />\n        <Text>{isHost ? \"You are the host\" : \"You are not the host\"}</Text>\n      </Flex>\n    </Container>\n  );\n}\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Settings/SettingsDrawer.tsx",["73"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Button,\n  Input,\n  Stack,\n  Flex,\n  Switch,\n  Center,\n} from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchCategories,\n  selectAllCategories,\n  setAllCategories,\n} from \"../triviaSlice\";\n\nexport default function SettingsDrawer({ isOpen, onClose, btnRef }) {\n  const allCategories = useSelector(selectAllCategories);\n\n  const [filteredCategories, setFilteredCategories] = useState(allCategories);\n  const [filter, setFilter] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, []);\n\n  useEffect(() => {\n    if (!filter) {\n      setFilteredCategories(allCategories);\n      return;\n    }\n    const filtered = allCategories.filter((category) =>\n      category?.name?.toLowerCase()?.includes(filter?.toLowerCase())\n    );\n\n    setFilteredCategories(filtered);\n  }, [filter, allCategories]);\n\n  const toggleCategory = (categoryToSelect) => {\n    const temp = allCategories.map((category) => {\n      if (category.name === categoryToSelect.name) {\n        return { ...category, selected: !category.selected };\n      }\n      return category;\n    });\n\n    dispatch(setAllCategories(temp));\n    setFilteredCategories(temp);\n  };\n\n  const toggleAllCategories = () => {\n    const temp = allCategories.map((category) => ({\n      ...category,\n      selected: !category.selected,\n    }));\n\n    dispatch(setAllCategories(temp));\n    setFilteredCategories(temp);\n  };\n\n  return (\n    <Drawer\n      isOpen={isOpen}\n      placement=\"left\"\n      onClose={onClose}\n      size={\"full\"}\n      // @ts-ignore\n      finalFocusRef={btnRef}\n    >\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Categories</DrawerHeader>\n\n          <DrawerBody>\n            <Input\n              placeholder=\"Type to filter...\"\n              value={filter}\n              onChange={(e) => setFilter(e.target.value)}\n            />\n\n            <Center pt=\"1rem\">\n              <Button onClick={() => toggleAllCategories()}>Toggle All</Button>\n            </Center>\n\n            <Stack mt=\"1rem\" textAlign=\"left\">\n              {filteredCategories.map((category: any, index) => (\n                <Flex\n                  onClick={() => toggleCategory(category)}\n                  justifyContent=\"space-between\"\n                  key={index}\n                >\n                  {category.name}\n                  <Switch\n                    onChange={() => toggleCategory(category)}\n                    isChecked={category.selected}\n                  />\n                </Flex>\n              ))}\n            </Stack>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n}\n","/Users/mordan/Documents/Coding/drunk-trivia/src/httpService.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/Tags.tsx",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/useLobby.ts",["74","75","76"],"import { useToast } from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { io } from \"socket.io-client\";\nimport {\n  selectQuestion,\n  setIsHost,\n  setSelectedAnswer,\n  updateQuestion,\n} from \"../triviaSlice\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\"; // Name of the event\nconst SOCKET_SERVER_URL = \"https://drinking-trivia-backend.herokuapp.com/\";\n// const SOCKET_SERVER_URL = process.env.BACKEND_URL || \"http://localhost:5000\";\n\nconst useLobby = (userName = `mordan${Math.floor(Math.random() * 100)}`) => {\n  const [hosting, setHosting] = useState(false);\n  const [toggle, setToggle] = useState(false);\n  const socketRef = useRef<any>();\n\n  const currentQuestion = useSelector(selectQuestion);\n\n  const dispatch = useDispatch();\n\n  const toast = useToast();\n\n  const sendQuestion = (question) => {\n    socketRef?.current?.emit(\"sendingQuestion\", question);\n  };\n\n  const connect = () => {\n    socketRef.current = io(SOCKET_SERVER_URL);\n    socketRef.current.emit(\"addUser\", userName);\n\n    socketRef.current.on(\"switchRoomSuccess\", (msg) => {\n      toast({ status: \"success\", description: msg });\n      console.log(\"switch success,\", msg);\n    });\n\n    socketRef.current.on(\"hostMessage\", (isHosting) => {\n      setHosting(isHosting);\n      dispatch(setIsHost(isHosting));\n    });\n\n    socketRef.current.on(\"userJoined\", () => {\n      console.log(\"user joined\");\n      console.log(\"sending question to new user\", currentQuestion);\n\n      setToggle(!toggle);\n    });\n\n    socketRef.current.on(\"receiveQuestion\", (question) => {\n      console.log(\"receiving question from host\", question);\n\n      dispatch(updateQuestion(question));\n    });\n\n    socketRef.current.on(\"selectChoice\", (answer) => {\n      console.log(\"someone selected a choice\", answer);\n\n      dispatch(setSelectedAnswer(answer));\n    });\n  };\n\n  const switchRoom = (roomName) => {\n    socketRef.current.emit(\"switchRoom\", roomName);\n  };\n\n  const updateCurrentQuestion = () => {\n    socketRef.current.emit(\"updateCurrentQuestion\", currentQuestion);\n  };\n\n  const selectAnswer = (answer) => {\n    socketRef?.current?.emit(\"selectChoice\", answer);\n    dispatch(setSelectedAnswer(answer));\n  };\n\n  const updateSelectedCategories = (selectedCategories) => {\n    socketRef.current.emit(\"updateSelectedCategories\", selectedCategories);\n  };\n\n  return {\n    connect,\n    switchRoom,\n    updateCurrentQuestion,\n    selectAnswer,\n    hosting,\n    sendQuestion,\n    toggle,\n  };\n};\n\n// const useLobby = (\n//   questionObject = {},\n//   userName = `mordan${Math.floor(Math.random() * 100)}`\n// ) => {\n//   //   const socket = io(SOCKET_SERVER_URL);\n//   const [connectedUsers, setConnectedUsers] = useState<any[]>([]);\n//   const [hosting, setHosting] = useState(false);\n//   const socketRef = useRef<any>();\n\n//   const currentQuestion = useSelector(selectQuestion);\n\n//   const toast = useToast();\n\n//   const dispatch = useDispatch();\n\n//   //   useEffect(() => {\n//   //     socketRef.current = io(SOCKET_SERVER_URL);\n//   //   });\n\n//   const connect = () => {\n//     socketRef.current = io(SOCKET_SERVER_URL);\n//     socketRef.current.emit(\"addUser\", userName);\n\n//     socketRef.current.on(\"updateChat\", (user, msg) => {\n//       console.log(msg);\n//       toast({\n//         title: \"Success\",\n//         description: msg,\n//         status: \"success\",\n//         duration: 3000,\n//         isClosable: true,\n//       });\n\n//       if (msg.includes(\"joined\")) {\n//         setConnectedUsers([...connectedUsers, user]);\n//         console.log(connectedUsers);\n//       }\n//     });\n\n//     socketRef.current.on(\"hostMessage\", (isHosting) => {\n//       setHosting(isHosting);\n//     });\n\n//     socketRef.current.on(\"selectChoice\", (answer) => {\n//       if (!hosting) {\n//         dispatch(setSelectedAnswer(answer));\n//       }\n//     });\n\n//     socketRef.current.on(\"sendNewQuestion\", () => {\n//       if (hosting) {\n//         socketRef.current.emit(\"updateCurrentQuestion\", currentQuestion);\n//         console.log(\"sending question,\", currentQuestion);\n//       }\n//     });\n\n//     socketRef.current.on(\"receiveNewQuestion\", (question) => {\n//       if (!hosting) {\n//         dispatch(updateQuestion(question));\n//       }\n//     });\n//   };\n\n//   const addUser = () => {\n//     socketRef.current.emit(\"addUser\", userName);\n//   };\n\n//   const switchRoom = (roomName) => {\n//     setConnectedUsers([]);\n//     socketRef.current.emit(\"switchRoom\", roomName);\n\n//     if (!hosting) {\n//       socketRef.current.emit(\"requestCurrentQuestion\");\n//     }\n//   };\n\n//   const emitSelectAnswer = (answer) => {\n//     socketRef.current.emit(\"selectChoice\", answer);\n//   };\n\n//   const emitNewQuestion = (question) => {\n//     socketRef.current.emit(\"sendNewQuestion\", question);\n//   };\n\n//   const requestNewQuestion = () => {\n//     socketRef.current.emit(\"requestCurrentQuestion\");\n//   };\n\n//   return {\n//     addUser,\n//     switchRoom,\n//     connect,\n//     connectedUsers,\n//     hosting,\n//     emitSelectAnswer,\n//     emitNewQuestion,\n//     requestNewQuestion,\n//   };\n// };\n\nexport default useLobby;\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/RoomForm.tsx",["77","78"],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":2,"column":8,"nodeType":"85","messageId":"86","endLine":2,"endColumn":12},{"ruleId":"83","severity":1,"message":"87","line":10,"column":3,"nodeType":"85","messageId":"86","endLine":10,"endColumn":7},{"ruleId":"83","severity":1,"message":"88","line":11,"column":3,"nodeType":"85","messageId":"86","endLine":11,"endColumn":14},{"ruleId":"83","severity":1,"message":"89","line":13,"column":28,"nodeType":"85","messageId":"86","endLine":13,"endColumn":37},{"ruleId":"83","severity":1,"message":"90","line":39,"column":9,"nodeType":"85","messageId":"86","endLine":39,"endColumn":14},{"ruleId":"91","severity":1,"message":"92","line":57,"column":6,"nodeType":"93","endLine":57,"endColumn":14,"suggestions":"94"},{"ruleId":"91","severity":1,"message":"95","line":62,"column":6,"nodeType":"93","endLine":62,"endColumn":8,"suggestions":"96"},{"ruleId":"83","severity":1,"message":"97","line":3,"column":3,"nodeType":"85","messageId":"86","endLine":3,"endColumn":9},{"ruleId":"83","severity":1,"message":"98","line":4,"column":3,"nodeType":"85","messageId":"86","endLine":4,"endColumn":13},{"ruleId":"83","severity":1,"message":"99","line":5,"column":3,"nodeType":"85","messageId":"86","endLine":5,"endColumn":15},{"ruleId":"83","severity":1,"message":"100","line":6,"column":3,"nodeType":"85","messageId":"86","endLine":6,"endColumn":15},{"ruleId":"83","severity":1,"message":"101","line":7,"column":3,"nodeType":"85","messageId":"86","endLine":7,"endColumn":16},{"ruleId":"83","severity":1,"message":"102","line":8,"column":3,"nodeType":"85","messageId":"86","endLine":8,"endColumn":16},{"ruleId":"83","severity":1,"message":"103","line":9,"column":3,"nodeType":"85","messageId":"86","endLine":9,"endColumn":20},{"ruleId":"83","severity":1,"message":"104","line":10,"column":3,"nodeType":"85","messageId":"86","endLine":10,"endColumn":9},{"ruleId":"83","severity":1,"message":"105","line":11,"column":3,"nodeType":"85","messageId":"86","endLine":11,"endColumn":8},{"ruleId":"91","severity":1,"message":"106","line":34,"column":6,"nodeType":"93","endLine":34,"endColumn":8,"suggestions":"107"},{"ruleId":"83","severity":1,"message":"108","line":2,"column":10,"nodeType":"85","messageId":"86","endLine":2,"endColumn":19},{"ruleId":"83","severity":1,"message":"109","line":12,"column":7,"nodeType":"85","messageId":"86","endLine":12,"endColumn":29},{"ruleId":"83","severity":1,"message":"110","line":78,"column":9,"nodeType":"85","messageId":"86","endLine":78,"endColumn":33},{"ruleId":"83","severity":1,"message":"111","line":2,"column":3,"nodeType":"85","messageId":"86","endLine":2,"endColumn":7},{"ruleId":"83","severity":1,"message":"90","line":14,"column":9,"nodeType":"85","messageId":"86","endLine":14,"endColumn":14},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Text' is defined but never used.","'ButtonGroup' is defined but never used.","'PhoneIcon' is defined but never used.","'toast' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'question' and 'sendQuestion'. Either include them or remove the dependency array.","ArrayExpression",["114"],"React Hook useEffect has missing dependencies: 'connect' and 'getNewQuestion'. Either include them or remove the dependency array.",["115"],"'Drawer' is defined but never used.","'DrawerBody' is defined but never used.","'DrawerFooter' is defined but never used.","'DrawerHeader' is defined but never used.","'DrawerOverlay' is defined but never used.","'DrawerContent' is defined but never used.","'DrawerCloseButton' is defined but never used.","'Button' is defined but never used.","'Input' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["116"],"'useEffect' is defined but never used.","'NEW_CHAT_MESSAGE_EVENT' is assigned a value but never used.","'updateSelectedCategories' is assigned a value but never used.","'Flex' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [question, sendQuestion, toggle]",{"range":"123","text":"124"},"Update the dependencies array to be: [connect, getNewQuestion]",{"range":"125","text":"126"},"Update the dependencies array to be: [dispatch]",{"range":"127","text":"128"},[1178,1186],"[question, sendQuestion, toggle]",[1252,1254],"[connect, getNewQuestion]",[754,756],"[dispatch]"]
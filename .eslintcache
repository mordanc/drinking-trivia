[{"/Users/mordan/Documents/Coding/drunk-trivia/src/index.tsx":"1","/Users/mordan/Documents/Coding/drunk-trivia/src/serviceWorker.ts":"2","/Users/mordan/Documents/Coding/drunk-trivia/src/app/store.ts":"3","/Users/mordan/Documents/Coding/drunk-trivia/src/App.tsx":"4","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/triviaSlice.ts":"5","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/TriviaPanel.tsx":"6","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Navbar.tsx":"7","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Settings/SettingsDrawer.tsx":"8","/Users/mordan/Documents/Coding/drunk-trivia/src/httpService.ts":"9","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/Tags.tsx":"10","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/useLobby.ts":"11","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/RoomForm.tsx":"12"},{"size":648,"mtime":1610900545891,"results":"13","hashOfConfig":"14"},{"size":5424,"mtime":1610900545892,"results":"15","hashOfConfig":"14"},{"size":409,"mtime":1610902869200,"results":"16","hashOfConfig":"14"},{"size":612,"mtime":1610920566651,"results":"17","hashOfConfig":"14"},{"size":3761,"mtime":1610989054782,"results":"18","hashOfConfig":"14"},{"size":3445,"mtime":1610989587945,"results":"19","hashOfConfig":"14"},{"size":717,"mtime":1610910963968,"results":"20","hashOfConfig":"14"},{"size":3048,"mtime":1610920484477,"results":"21","hashOfConfig":"14"},{"size":567,"mtime":1610905936497,"results":"22","hashOfConfig":"14"},{"size":931,"mtime":1610912385579,"results":"23","hashOfConfig":"14"},{"size":2804,"mtime":1610989579798,"results":"24","hashOfConfig":"14"},{"size":534,"mtime":1610987432516,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1bf3ilm",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mordan/Documents/Coding/drunk-trivia/src/index.tsx",[],["54","55"],"/Users/mordan/Documents/Coding/drunk-trivia/src/serviceWorker.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/app/store.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/App.tsx",["56"],"import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport TriviaPanel from \"./features/trivia/TriviaPanel/TriviaPanel\";\r\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\r\nimport Navbar from \"./features/trivia/Navbar\";\r\n\r\nconst config = {\r\n  useSystemColorMode: false,\r\n  initialColorMode: \"dark\",\r\n};\r\n\r\nconst customTheme = extendTheme({ config });\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ChakraProvider theme={customTheme}>\r\n        <Navbar />\r\n        <TriviaPanel />\r\n      </ChakraProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/triviaSlice.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/TriviaPanel.tsx",["57","58","59","60","61","62"],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Navbar.tsx",["63","64","65","66","67","68","69","70","71"],"import React from \"react\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Button,\n  Input,\n  useDisclosure,\n} from \"@chakra-ui/react\";\n\nimport hamburger from \"../../app/images/menu-white-48dp.svg\";\n\nimport SettingsDrawer from \"./Settings/SettingsDrawer\";\n\nexport default function Navbar() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const btnRef = React.useRef();\n  return (\n    <div className=\"navbar\">\n      <SettingsDrawer isOpen={isOpen} onClose={onClose} btnRef={btnRef} />\n      <img\n        onClick={onOpen}\n        className={\"settings_button\"}\n        src={hamburger}\n        alt=\"Settings\"\n      />\n    </div>\n  );\n}\n","/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/Settings/SettingsDrawer.tsx",["72"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Button,\n  Input,\n  Stack,\n  Flex,\n  Switch,\n  Center,\n} from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchCategories,\n  selectAllCategories,\n  setAllCategories,\n} from \"../triviaSlice\";\n\nexport default function SettingsDrawer({ isOpen, onClose, btnRef }) {\n  const allCategories = useSelector(selectAllCategories);\n\n  const [filteredCategories, setFilteredCategories] = useState(allCategories);\n  const [filter, setFilter] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, []);\n\n  useEffect(() => {\n    if (!filter) {\n      setFilteredCategories(allCategories);\n      return;\n    }\n    const filtered = allCategories.filter((category) =>\n      category?.name?.toLowerCase()?.includes(filter?.toLowerCase())\n    );\n\n    setFilteredCategories(filtered);\n  }, [filter, allCategories]);\n\n  const toggleCategory = (categoryToSelect) => {\n    const temp = allCategories.map((category) => {\n      if (category.name === categoryToSelect.name) {\n        return { ...category, selected: !category.selected };\n      }\n      return category;\n    });\n\n    dispatch(setAllCategories(temp));\n    setFilteredCategories(temp);\n  };\n\n  const toggleAllCategories = () => {\n    const temp = allCategories.map((category) => ({\n      ...category,\n      selected: !category.selected,\n    }));\n\n    dispatch(setAllCategories(temp));\n    setFilteredCategories(temp);\n  };\n\n  return (\n    <Drawer\n      isOpen={isOpen}\n      placement=\"left\"\n      onClose={onClose}\n      size={\"full\"}\n      // @ts-ignore\n      finalFocusRef={btnRef}\n    >\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Categories</DrawerHeader>\n\n          <DrawerBody>\n            <Input\n              placeholder=\"Type to filter...\"\n              value={filter}\n              onChange={(e) => setFilter(e.target.value)}\n            />\n\n            <Center pt=\"1rem\">\n              <Button onClick={() => toggleAllCategories()}>Toggle All</Button>\n            </Center>\n\n            <Stack mt=\"1rem\" textAlign=\"left\">\n              {filteredCategories.map((category: any, index) => (\n                <Flex\n                  onClick={() => toggleCategory(category)}\n                  justifyContent=\"space-between\"\n                  key={index}\n                >\n                  {category.name}\n                  <Switch\n                    onChange={() => toggleCategory(category)}\n                    isChecked={category.selected}\n                  />\n                </Flex>\n              ))}\n            </Stack>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n}\n","/Users/mordan/Documents/Coding/drunk-trivia/src/httpService.ts",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/Tags.tsx",[],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/useLobby.ts",["73","74"],"/Users/mordan/Documents/Coding/drunk-trivia/src/features/trivia/TriviaPanel/RoomForm.tsx",["75","76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":2,"column":8,"nodeType":"83","messageId":"84","endLine":2,"endColumn":12},{"ruleId":"81","severity":1,"message":"85","line":4,"column":3,"nodeType":"83","messageId":"84","endLine":4,"endColumn":9},{"ruleId":"81","severity":1,"message":"86","line":8,"column":3,"nodeType":"83","messageId":"84","endLine":8,"endColumn":9},{"ruleId":"81","severity":1,"message":"87","line":39,"column":9,"nodeType":"83","messageId":"84","endLine":39,"endColumn":14},{"ruleId":"88","severity":1,"message":"89","line":63,"column":6,"nodeType":"90","endLine":63,"endColumn":8,"suggestions":"91"},{"ruleId":"88","severity":1,"message":"92","line":71,"column":6,"nodeType":"90","endLine":71,"endColumn":15,"suggestions":"93"},{"ruleId":"88","severity":1,"message":"94","line":86,"column":6,"nodeType":"90","endLine":86,"endColumn":16,"suggestions":"95"},{"ruleId":"81","severity":1,"message":"96","line":3,"column":3,"nodeType":"83","messageId":"84","endLine":3,"endColumn":9},{"ruleId":"81","severity":1,"message":"97","line":4,"column":3,"nodeType":"83","messageId":"84","endLine":4,"endColumn":13},{"ruleId":"81","severity":1,"message":"98","line":5,"column":3,"nodeType":"83","messageId":"84","endLine":5,"endColumn":15},{"ruleId":"81","severity":1,"message":"99","line":6,"column":3,"nodeType":"83","messageId":"84","endLine":6,"endColumn":15},{"ruleId":"81","severity":1,"message":"100","line":7,"column":3,"nodeType":"83","messageId":"84","endLine":7,"endColumn":16},{"ruleId":"81","severity":1,"message":"101","line":8,"column":3,"nodeType":"83","messageId":"84","endLine":8,"endColumn":16},{"ruleId":"81","severity":1,"message":"102","line":9,"column":3,"nodeType":"83","messageId":"84","endLine":9,"endColumn":20},{"ruleId":"81","severity":1,"message":"103","line":10,"column":3,"nodeType":"83","messageId":"84","endLine":10,"endColumn":9},{"ruleId":"81","severity":1,"message":"104","line":11,"column":3,"nodeType":"83","messageId":"84","endLine":11,"endColumn":8},{"ruleId":"88","severity":1,"message":"105","line":34,"column":6,"nodeType":"90","endLine":34,"endColumn":8,"suggestions":"106"},{"ruleId":"81","severity":1,"message":"107","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":19},{"ruleId":"81","severity":1,"message":"108","line":11,"column":7,"nodeType":"83","messageId":"84","endLine":11,"endColumn":29},{"ruleId":"81","severity":1,"message":"109","line":1,"column":10,"nodeType":"83","messageId":"84","endLine":1,"endColumn":14},{"ruleId":"81","severity":1,"message":"87","line":7,"column":9,"nodeType":"83","messageId":"84","endLine":7,"endColumn":14},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Center' is defined but never used.","'HStack' is defined but never used.","'toast' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connect' and 'getNewQuestion'. Either include them or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has missing dependencies: 'emitNewQuestion', 'question', and 'requestNewQuestion'. Either include them or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'emitNewQuestion' and 'hosting'. Either include them or remove the dependency array.",["114"],"'Drawer' is defined but never used.","'DrawerBody' is defined but never used.","'DrawerFooter' is defined but never used.","'DrawerHeader' is defined but never used.","'DrawerOverlay' is defined but never used.","'DrawerContent' is defined but never used.","'DrawerCloseButton' is defined but never used.","'Button' is defined but never used.","'Input' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["115"],"'useEffect' is defined but never used.","'NEW_CHAT_MESSAGE_EVENT' is assigned a value but never used.","'Flex' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [connect, getNewQuestion]",{"range":"124","text":"125"},"Update the dependencies array to be: [emitNewQuestion, hosting, question, requestNewQuestion]",{"range":"126","text":"127"},"Update the dependencies array to be: [emitNewQuestion, hosting, question]",{"range":"128","text":"129"},"Update the dependencies array to be: [dispatch]",{"range":"130","text":"131"},[1254,1256],"[connect, getNewQuestion]",[1384,1393],"[emitNewQuestion, hosting, question, requestNewQuestion]",[1670,1680],"[emitNewQuestion, hosting, question]",[754,756],"[dispatch]"]